=========================  COMPUTER CITY: SEWERS ========================
Aaron Weeden, 2009
Earlham College
Contact:  amweeden06@earlham.edu

INTRODUCTION:
Computer City:  Sewers is designed to teach digital logic to players of any age.  The player constructs gates, digital circuits, and truth tables, and learns about how they relate.

TABLE OF CONTENTS:
I.   Software Requirements
II.  Building
III. Running
IV.  Game controls
V.   Tips for adding to the game
VI.  How to specify a room file

I.  SOFTWARE REQUIREMENTS:
OpenGL, which can be obtained at www.opengl.org
The GNU compiler, which can be obtained at www.gnu.org

II.  BUILDING
To build the game, type `make' on a terminal in the Sewers directory.

III. RUNNING
To run, type `./Sewers' on a terminal in the Sewers directory

IV.  GAME CONTROLS
	A.  Movement
		a - left
		w - up
		d - right
		s - down
	B.  Game stats - g
	C.  Help - h
	D.  Game options - o

V.   TIPS FOR ADDING TO THE GAME:
How to add a new graphical object to the game:

1)  Give it new constants in constants.hpp
2)  Specify its drawing function in SewersObject.cpp
3)  Add a new SewersObject or vector of SewersObjects corresponding to this new 	object in the private section of GameEngine.hpp
4)  Specify when the object should be drawn in the re_display() function in 		GameEngine.cpp
5)  Specify how the object should be initialized
	1)  In the GameEngine constructor in GameEngine.cpp
	2)  Via a file.  If this is the case, add a new 'else if' clause to the 
        load_file() function in GameEngine.cpp

VI.  HOW TO SPECIFY A ROOM FILE

For debugging purposes, each line should start with the '\' character.  This
allows the correct line number to be specified in any debugging messagese.

1)  Start by specifying where the avatar will appear in the room.  Add a line:
    
        AVATAR <left edge> <bottom edge> <direction to face>
    
    <left edge> and <bottom edge> should be numbers specifying the position of
    the avatar on the screen.

    <direction to face> is either LEFT, RIGHT, DOWN, or UP.  If an unknown value
    is given here, the default is UP.

2)  Next, specify the circuits in the room.  The form is as follows:

        CIRCUIT

            DOOR <door bottom edge> <door orientation>            
            <objects>

        CIRCUIT_END

    <bottom edge> is a coordinates for drawing the object.
    <door orientation> is either LEFT or RIGHT.  The default is RIGHT if an 
    unrecognized value is given.

    <objects> is a list of objects.  Objects lower on the list power objects
    higher on the list.  The object on the top of the list powers the door.  The
    possible objects are:

    1.    SWITCH <left edge> <bottom edge> <value>

    SWITCHes have values of 0 or 1 and are not powered by anything.  Thus, they
    must be the last object before CIRCUIT_END, unless they have a:

    2.    SWITCH_BUTTON <left edge> <bottom edge>

    which is a button that changes the value of the switch above it.

    3.    INVERTER <left edge> <bottom edge>
        
            <inputs>
    
    INVERTERs change 0 input values to 1 output values and vice versa.  See
    AND for a description of <inputs>.
        
    4.    AND <left edge> <bottom edge> <num inputs>

            <inputs>

    AND does a logical AND on <inputs>.  <inputs> is a list of sub-circuits
    that power each of its inputs.  <inputs> is of the following form:

        INPUT_BEGIN

            <objects>

        INPUT_END

        INPUT_BEGIN

            <objects>

        INPUT_END
        
        ...

    where <objects> are any of the valid values of <objects> as discuessed above    and throughout this section.

    5.    OR <left edge> <bottom edge> <num inputs>

            <inputs>

    which, similar to AND, does a logical OR on <inputs>.

    6.    PANEL <left edge> <bottom edge> <num inputs>

            <inputs>

    PANEL allows a gate to be placed on it.

3)  Specify the other objects in the room.  These can be either LADDER, FLOOR,
    GATE_BOX, or COMPUTER.  Each of these are of the form:

        OBJECT <left edge> <bottom edge>

    except floor, which is 
    
        FLOOR <left edge> <right edge> <bottom edge> <top edge>
