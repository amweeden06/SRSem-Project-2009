Note that the progress of tasks and their resolutions should be followed in the wiki.

_Spring Semester Log_
2/24
Bitty can now walk from room to room, without any errors so far!

_Fall Semester Log_
10/25

Paper - Got sources for evaluating educational computer games.  There's a lot there!  
I feel like I could write a paper just on this sub-topic.
But, I want to be sure I am focusing only on CS related games, and probably only on college-level age group.
Tomorrow I'll begin the reading/taking notes stage of this part of the paper.

Game - I've decided to scrap both GIMP and ClanLib and just write the game myself in c++ using OpenGL for graphics.
I think the game is simple enough, it would have been a lot of work to learn how to use ClanLib, and I already am familiar with OpenGL, so I don't think I'll regret my decision.
With that decision behind me, I've implemented the basic display class that will display the game window.
I've also started implementing Jim's component class with the components of the game, and made a list of what they will be.


10/26

I now have working a basic avatar that moves around the screen.
Right now it's a green-blue humanoid, which might end up sticking if I don't do more detailed graphics.
I also have working a simple wall panel that prints a debug message when the player walks into it.
Drawing the graphics via OpenGL is rather cumbersome, since I have to keep specifying specific vertices for drawing rectangles, etc. 
Luckily, there are not too many complicated graphics planned.
Though, the gate screen could prove difficult; I will want to be sure to make it as automated as possible.
Today's task took about 4 hours, which was 4 times as much as I had planned.  
The paper is lagging behind also, so I will want to get on the ball with that tomorrow.  
Tomorrow's task is to implement the user's interface.
I think I might implement it as a GLUI, since this is a built-in feature of OpenGL I am already familiar with.
That should help speed up the task, as today's took 4 times longer than I expected.
I'm lagging behind on the paper as well, so I'll want to get cracking on that tomorrow.


10/27

There is now a menu bar with colored boxes corresponding to new, save, load, and quit.
I am still trying to get GLUI to work on my mac, to no avail so far.

Great progress on the paper!
I found some really intriguing sources, and it looks like there are plenty of them.
I have started reading through them; over the next few days I should be able to write the evaluation section of the paper.


10/28

Got the project loaded into github.
Also ported the game over to the ACLs, where I know GLUI will be reliable.
I think unless I can definitively determine that GLUI is non-functional on OSX, I will commit to implementing the user interface as a GLUI.
That will save a lot of time, also, since the functionality of a typical GLUI is exactly what I want, and I'm familiar with using them.
So, that will go on hold for awhile while I fool around with GLUI on OSX.
The next four days I'll be working on getting the re_display() functions for the rest of the game objects finished.

Tomorrow will be a paper catch up day in a big way.
By my watch, I need to by up to having written about 3/4 of the "evaluation" section of the paper after tomorrow.
If I can get to that point it would be great, but really whatever I finish tomorrow I will use to consider if I need to change around some scheduling of things.


10/29

The initial game screen is shaping up!  I've decreased the window size and added walls and a ladder.
The next step is to add the control panel and door, followed by the gate screen and all the gates.

Found another interesting couple of sources on evaluating games.
One of them focuses only on the useability of the game, which reminded me that there is more to evaluating a game than just learning outcomes.
Of particular interest is a heuristic approach I found by Pinelle, Wong, and Stach that I can start applying right away.

11/6

First room is completely implemented.
I've decided to change things up; no components, just a method to draw objects.
This should simplifiy things a lot.
I am also going to put all of the game control into a game engine class, rather
than having the door keep track of whether it is open, for example.

11/7

I've lumped all the drawing of game objects into a single function, the first
variable of which is the ID of the object to be drawn.  I can already tell this
will make things easier down the road.  Here are the next few tasks:

1) Reconstruct the first room based on the draw_object function (1 hour)
2) Create game engine class to handle user input and game scenarios (2 hours)
3) Create functionality to load rooms from files and test it (2 hours)

11/8

Instead of drawing walls on the floor, I'll draw the floor on the walls.  This
allows one object to be drawn, rather than 4 or more.
1) is complete.  It took about an hour, as planned.  The input file is Room1.sew
There is now a SewersObject ADT that has as member variables the parameters of
the function I described in 11/7.  That function is now a member function of
the SewersObject and takes no arguments.  The main program will contain a vector
of SewerObjects tthat it constructs when it loads a room from a file.
Moving everything into the SewersObject took about an hour.
